package org.example;
/**
 * Интерфейс представляет собой простую хеш-таблицу, которая хранит пары ключ-значение.
 */
public interface MyMap<Key, Value> {

    /**
     * Возвращает значение, связанное с указанным ключом.
     *
     * @param key Ключ, по которому производится поиск значения.
     * @return Значение, связанное с указанным ключом, или null, если такого ключа нет.
     */
    Value get(Key key);

    /**
     * Проверяет, содержит ли хеш-таблица указанный ключ.
     *
     * @param key Ключ, который требуется проверить на наличие в хеш-таблице.
     * @return {@code true}, если ключ содержится в хеш-таблице, иначе {@code false}.
     */
    default boolean containsKey(Key key) {
        return get(key) != null;
    }

    /**
     * Вставляет элемент в хеш-таблицу или обновляет значение для существующего ключа.
     *
     * @param key   Ключ, который следует вставить или обновить.
     * @param value Значение, связанное с указанным ключом.
     */
    void put(Key key, Value value);

    /**
     * Удаляет элемент из хеш-таблицы по указанному ключу.
     *
     * @param key Ключ элемента, который требуется удалить.
     * @return Значение, связанное с удаленным ключом, или null, если ключ не найден.
     */
    Value remove(Key key);

    /**
     * Возвращает количество элементов (пар ключ-значение) в хеш-таблице.
     *
     * @return Количество элементов в хеш-таблице.
     */
    int size();

    /**
     * Проверяет, пуста ли хеш-таблица, то есть, содержит ли она какие-либо элементы.
     *
     * @return {@code true}, если хеш-таблица не содержит элементов, иначе {@code false}.
     */
    boolean isEmpty();

    /**
     * Интерфейс представляет собой запись в хеш-таблице, содержащую ключ и значение.
     */
    interface Entry<Key, Value> {

        /**
         * Возвращает ключ записи.
         *
         * @return Ключ записи.
         */
        Key getKey();

        /**
         * Возвращает значение записи.
         *
         * @return Значение записи.
         */
        Value getValue();

        /**
         * Устанавливает новое значение для записи и возвращает предыдущее значение.
         *
         * @param value Новое значение для установки.
         * @return Предыдущее значение записи.
         */
        Value setValue(Value value);
    }
}

